#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <cjson/cJSON.h>

typedef struct {
    int x;
    long long y;
} Point;

int main() {
    const char* filename = "testcase.json"; 
    FILE* file = fopen(filename, "r");

    if (!file) {
        perror("Failed to open file");
        return 1;
    }

    
    fseek(file, 0, SEEK_END);
    long length = ftell(file);
    fseek(file, 0, SEEK_SET);
    char* data = (char*)malloc(length + 1);
    fread(data, 1, length, file);
    fclose(file);
    data[length] = '\0'; 

    
    cJSON* json = cJSON_Parse(data);
    free(data);
    
    if (!json) {
        fprintf(stderr, "Error parsing JSON\n");
        return 1;
    }

    
    cJSON* keys = cJSON_GetObjectItem(json, "keys");
    int n = cJSON_GetObjectItem(keys, "n")->valueint;
    int k = cJSON_GetObjectItem(keys, "k")->valueint;

    
    Point* points = (Point*)malloc(n * sizeof(Point));
    int pointIndex = 0;

    
    cJSON* pointJson;
    cJSON_ArrayForEach(pointJson, json) {
        if (strcmp(pointJson->string, "keys") == 0) continue;

        
        int x = atoi(pointJson->string);
        
        int base = cJSON_GetObjectItem(pointJson, "base")->valueint;
        const char* valueStr = cJSON_GetObjectItem(pointJson, "value")->valuestring;

       
        long long y = strtoll(valueStr, NULL, base);
        points[pointIndex++] = (Point){x, y};
    }

    
    long long result = 0;

    for (int i = 0; i < k; i++) {
        long long term = points[i].y;
        for (int j = 0; j < k; j++) {
            if (i != j) {
                term = term * (-points[j].x) / (points[i].x - points[j].x);
            }
        }
        result += term;
    }

    printf("The constant term (secret) is: %lld\n", result);

    free(points);
    cJSON_Delete(json);
    return 0;
}
